/*
 * generated by Xtext
 */
package net.modelbased.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.ocl.examples.xtext.base.utilities.CS2PivotResourceAdapter
import org.eclipse.ocl.examples.xtext.base.utilities.BaseCSResource
import org.eclipse.ocl.examples.pivot.ecore.Pivot2Ecore
import org.eclipse.emf.ecore.EcorePackage
import org.eclipse.emf.common.util.URI
import java.io.ByteArrayOutputStream
import java.util.Collections
import java.util.HashMap
import org.eclipse.ocl.examples.pivot.PivotConstants
import org.eclipse.ocl.common.OCLConstants
import org.eclipse.emf.ecore.xmi.XMLResource
import org.eclipse.emf.ecore.xmi.impl.URIHandlerImpl.PlatformSchemeAware
import net.modelbased.constraintext.ConfigAnno
import org.eclipse.emf.ecore.EObject
import org.eclipse.ocl.examples.xtext.base.baseCST.AnnotationCS
import org.eclipse.ocl.examples.xtext.base.baseCST.ModelElementCS
import org.eclipse.ocl.examples.xtext.base.baseCST.AnnotationElementCS
import org.eclipse.ocl.examples.xtext.base.baseCST.impl.AnnotationCSImpl
import org.eclipse.ocl.examples.xtext.base.baseCST.BaseCSTFactory
import org.eclipse.ocl.examples.pivot.NamedElement
import net.modelbased.constraintext.ExpDetail
import org.eclipse.ocl.examples.pivot.Detail
import org.eclipse.ocl.examples.xtext.base.baseCST.AttributeCS
import org.eclipse.ocl.examples.xtext.base.baseCST.ReferenceCS
import org.eclipse.ocl.examples.xtext.base.baseCST.ConstraintCS
import org.eclipse.ocl.examples.xtext.base.baseCST.ClassifierCS

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
class ConstraintMLGenerator implements IGenerator {
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		
		resource.extComplete()
		
		val adapter = CS2PivotResourceAdapter::findAdapter(resource) as CS2PivotResourceAdapter;
		val pivot = adapter.getPivotResource(resource as BaseCSResource);
		//val adapter2 = CS2PivotResourceAdapter::findAdapter(pivot) as CS2PivotResourceAdapter
		val options = new HashMap<String,Object>();
        //options.put("PRIMITIVE_TYPES_URI_PREFIX", "http://www.eclipse.org/emf/2002/Ecore#//");
		//options.put(PivotConstants::PRIMITIVE_TYPES_URI_PREFIX, "primitives.ecore#//");
		//options.put(OCLConstants::OCL_DELEGATE_URI, "http://someuri");
		val ecore = Pivot2Ecore::createResource(
			adapter.metaModelManager,
			pivot,
			URI::createURI("http://myuri"),
			options
		)
		
		ecore.getDefaultSaveOptions().put(XMLResource.OPTION_URI_HANDLER, new PlatformSchemeAware());
		
		val baos = new ByteArrayOutputStream()
		ecore.save(baos, null)
		fsa.generateFile('generated.ecore', baos.toString)
		
		//baos.reset
		//resource.save(baos, Collections::emptyMap)
		//fsa.generateFile('cs.xmi', baos.toString)
		
		baos.reset
		pivot.save(baos, Collections::emptyMap)
		fsa.generateFile('pivot.xmi', baos.toString)
		
	}
	
	
	def extComplete(Resource res){
		var elemit = res.allContents
		while(elemit.hasNext){
			val elem = elemit.next()
			elem.extCompleteElem
		}
	}
	
	def extCompleteElem(EObject e){
		switch(e){
			AnnotationCS case e.toString == 'config' :{
				e.name = 'config'
				(e.pivot as NamedElement).name = 'config'	
			}
			AnnotationCS case 
				(e.eContainer instanceof AttributeCS) && e.toString.startsWith(':'):
			{
				e.name = 'PropertyExtended'	
				(e.pivot as NamedElement).name = e.name
			}
			ExpDetail:{
				System.out.println(e.name)
				e.value.addAll(e.expr.map[toString])
				(e.pivot as Detail).value.addAll(e.value)
			}
			ReferenceCS:{
				if(e.qualifier.contains('contains')){
					e.qualifier.remove('contains')
					e.qualifier.add('composes')
					(e.pivot as org.eclipse.ocl.examples.pivot.Property).setIsComposite(true)
				}
			}
			ConstraintCS:{
				if(e.name == 'priority' || e.name == 'hard'){
					val lst = (e.eContainer as ClassifierCS).ownedConstraint
					val succ = lst.get(lst.indexOf(e) + 1)
					if(e.name=='hard'){
						succ.name = '''HARD_«succ.name»'''.toString()
						(succ.pivot as NamedElement).name = succ.name
					}
					e.name = '''«e.name.toFirstUpper()»_«succ.name»'''.toString()
					(e.pivot as NamedElement).name = e.name
				}
			}
			default: null
		}
	}
	
	
}
