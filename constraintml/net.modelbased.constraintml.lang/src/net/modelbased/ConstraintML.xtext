grammar net.modelbased.ConstraintML with org.eclipse.ocl.examples.xtext.oclinecore.OCLinEcore
//org.eclipse.ocl.examples.xtext.essentialocl.EssentialOCL

//generate constraintML "http://www.modelbased.net/ConstraintML"
//import "http://www.eclipse.org/emf/2002/Ecore" as ecore
//import "platform:/resource/org.eclipse.ocl.examples.pivot/model/Pivot.ecore" as pivot
//import "platform:/resource/org.eclipse.ocl.examples.xtext.base/model/BaseCST.ecore" as base
//import "platform:/resource/org.eclipse.ocl.examples.xtext.essentialocl/model/EssentialOCLCST.ecore" as essential
//import "platform:/resource/org.eclipse.ocl.examples.xtext.oclinecore/model/OCLinEcoreCST.ecore" as oclinecore
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/ocl/3.1.0/BaseCST" as base
import "http://www.eclipse.org/ocl/3.1.0/EssentialOCLCST" as essentialocl
import "http://www.eclipse.org/ocl/3.1.0/Pivot" as pivot
import "http://www.eclipse.org/ocl/3.1.0/OCLinEcoreCST" as oclinecore
import "platform:/resource/net.modelbased.constraintml.lang/src/net/modelbased/model/ConstraintExt.ecore" as ext

MyRootCS returns base::RootPackageCS:
	{base::RootPackageCS} ('module' name=UnrestrictedName)?
        (ownedLibrary+=LibraryCS)*
        (ownedImport+=ImportCS)*
	ownedNestedPackage += MyPackage*;

MyPackage returns base::PackageCS:
	'package' name=UnrestrictedName
	(':' nsPrefix=UnrestrictedName)? ('=' nsURI=URI)? '{'
		ownedType += MyClassCS*
	'}'
;

MyClassCS returns base::ClassCS:
	'class' name = UnrestrictedName '{'
	ownedProperty += MyProperty*
	('constraint' 
		(ownedConstraint += MyConstraintPrefix)? 
		ownedConstraint += MyConstraint
	)*
	//(ownedConstraint += InvariantConstraintCS)*
	'}'
;

MyProperty returns base::StructuralFeatureCS: 
	MyAttributeCS | MyReference
;

MyReference returns base::ReferenceCS:
	('ref' | qualifier += 'contains') ownedType = TypedMultiplicityRefCS name = UnrestrictedName
	('opposite' opposite=[pivot::Property|UnrestrictedName])?
	(
		(ownedAnnotation += MyPropertyDecoAnnotation) |
		(':' '{' qualifier+='derived' ownedDefaultExpression+=SpecificationCS'}')
	)?
;

MyAttributeCS returns base::AttributeCS:
	(ownedAnnotation += MyConfig | qualifier += 'id')? ownedType=TypedMultiplicityRefCS name = UnrestrictedName 
	(
		(ownedAnnotation += MyPropertyDecoAnnotation) |
		(':' '{' qualifier+='derived' ownedDefaultExpression+=SpecificationCS'}')
	)?;

MyPropertyDecoAnnotation returns base::AnnotationCS:
	':' '{' 
			(ownedDetail += MyDomain)? 
			(ownedDetail += MyResistance)? 
			//(ownedDetail += MyDerivation)?
		'}' 
;

MyDerivation returns ext::ExpDetail:
	name = 'derivation' '=' expr += SpecificationCS
;

MyResistance returns ext::ExpDetail:
	name = 'resistance' '=' expr += SpecificationCS
;

MyDomain returns ext::ExpDetail:
	name = 'domain' '=' expr += SpecificationCS
;

MyConfig returns base::AnnotationCS:
	{base::AnnotationCS} name = 'config'
;

MyConstraint returns base::ConstraintCS:
	name = UnrestrictedName ':' specification = SpecificationCS
;

MyConstraintPrefix returns base::ConstraintCS:
	MyConstraintHard | MyConstraintPriority
;

MyConstraintHard returns base::ConstraintCS:
	'(' name = 'hard' ')'
;

MyConstraintPriority returns base::ConstraintCS:
	'(' name = 'priority' '=' specification = SpecificationCS ')'
;


